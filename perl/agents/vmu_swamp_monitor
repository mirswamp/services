#!/usr/bin/env perl

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2020 Software Assurance Marketplace

use 5.014;
use utf8;
use warnings;
use strict;
use Carp qw(croak);
use Cwd qw(getcwd);
use English '-no_match_vars';
use File::Basename qw(basename);
use File::Spec qw(devnull);
use File::Spec::Functions;
use Getopt::Long qw(GetOptions);
use Log::Log4perl::Level;
use Log::Log4perl;
use POSIX qw(WNOHANG waitpid);    # for nonblocking read

use FindBin qw($Bin);
use lib ( "$FindBin::Bin/../perl5", "$FindBin::Bin/lib" );

use SWAMP::Locking qw(swamplock);
use SWAMP::vmu_Support qw(
	setHTCondorEnvironment
	identifyScript
	runScriptDetached
	create_empty_file
	getSwampDir
  	loadProperties
  	getLoggingConfigString
  	start_process
  	stop_process
);

if (! swamplock($PROGRAM_NAME)) {
	exit 0;
}

my $debug   = 0;
my $config;
my $asdetached = 1;
my $startupdir = getcwd();
my $basedir = "$FindBin::Bin/..";
my $pidfile;

my @PRESERVEARGV = @ARGV;
GetOptions(
    'debug'			=> \$debug,
	'pidfile=s'		=> \$pidfile,
    'config|C=s'	=> \$config,
    'detached!'		=> \$asdetached,
);

# Initialize Log4perl
Log::Log4perl->init(getLoggingConfigString());

my $log = Log::Log4perl->get_logger(q{});
$log->level($debug ? $TRACE : $INFO);

setHTCondorEnvironment();
identifyScript(\@PRESERVEARGV);
runScriptDetached() if ($asdetached);
# change the default catch-all log file permissions so all scripts can write to it.
# runScriptDetached can specify a different file name than this default used below
my $catch_all_log = catfile(getSwampDir(), 'log', 'swamperrors.log');
if (! -f $catch_all_log) {
	if (! create_empty_file($catch_all_log)) {
		# this is not fatal
		$log->warn("Warning - cannot create: $catch_all_log");
	}
}
if (-f $catch_all_log) {
	my $count = chmod 0666, $catch_all_log;
	if ($count != 1) {
		# again - not fatal
		$log->warn("Warning - cannot set permissions to 0666 on: $catch_all_log");
	}
}

# write pid to pidfile from init script
if ($pidfile && open(my $fh, '>', $pidfile)) {
	print $fh $PID, "\n";
	close($fh);
}
else {
	$log->error("Error - $PROGRAM_NAME ($PID) - failed to write pidfile: ", $pidfile || '', " - exiting");
	exit(0);
}
chdir($startupdir);

my $done = 0;
my $reinit = 0;

sub hup_handler {
    $log->info("HUP: reread config file");
	$reinit = 1;
}

sub trap_handler {
    $log->info("Caught signal @_ - reaping children and shutting down");
	$done = 1;
}

use sigtrap 'handler', \&trap_handler, 'normal-signals';
use sigtrap 'handler', \&hup_handler,  'HUP';

# map of child process ids indexed by the same alias name used with `%processes`
my %children;
#%process a map of process command lines indexed by an alias name. Taken from the config file.
my %processes;
my %maxRetries;
my %maxFreq;
my %startTime;

# if child stops on its own, wait for it
local $SIG{'CHLD'} = sub { my ($sig) = @_ ;
    # don't change $! and $? outside handler
	# process exit status for errors from child
    local $OS_ERROR    = $OS_ERROR;
    local $CHILD_ERROR = $CHILD_ERROR;
    my $pid = 1;
    while ( $pid > 0 ) {
        $pid = waitpid( -1, WNOHANG );
		if ($pid > 0) {
			my $proc = $children{$pid};
			my $process = $processes{$proc};
			my ($rc, $sig, $core) = ($CHILD_ERROR >> 8, $CHILD_ERROR & 127, $CHILD_ERROR & 128);
			$log->info("CHLD handler - received signal $sig for: $pid [$process] rc: $rc core: $core");
			if ($rc == 2) {
    			$log->error("Fatal Error - $pid $proc [$process] - monitor will exit");
				$done = 1;
			}
		}
    }
};

Log::Log4perl->get_logger('runtrace')->trace("$PROGRAM_NAME ($PID) called with args: @PRESERVEARGV");
$log->info("$PROGRAM_NAME: config file: $config");

initMonitor();
initProcesses();

while (! $done) {
	if ($reinit) {
		reapChildren();
		initMonitor();
		initProcesses();
	}
    sleep 60;
    foreach my $child_pid ( keys %children ) {
        my $pid = waitpid( $child_pid, WNOHANG );
        if ( $pid == -1 ) {
			if (! $done) {
				$log->info("Sleep loop restart after wait on child: $child_pid");
            	restart_child($child_pid);
			}
        }
    }
}
reapChildren();
$log->info("$PROGRAM_NAME ($PID) leaving sleep loop - exiting");
exit 0;

# stop children and wait for them
sub reapChildren {
	$log->info('reapChildren - children: ', sub {use Data::Dumper; Dumper(\%children);}, ' processes: ', sub {use Data::Dumper; Dumper(\%processes);});
    foreach my $child_pid (keys %children) {
        $log->info("stopping [$child_pid] $processes{$children{$child_pid}}");
        my $retval = stop_process($child_pid);
        $log->info("[$child_pid] $processes{$children{$child_pid}} returns: $retval");
    }
	$log->info('reapChildren - waiting on children: ', sub {use Data::Dumper; Dumper(\%children);});
    foreach my $child_pid (keys %children) {
        $log->info("waitpid [$child_pid] $processes{$children{$child_pid}}");
        my $pid = waitpid( $child_pid, 0 );
        $log->info("reaped [$child_pid] $processes{$children{$child_pid}}");
	}
    return;
}

sub initProcesses {
    foreach my $proc (keys %processes) {
        $processes{$proc} =~ s/SWAMPDIR/$basedir/sxm;
        $processes{$proc} =~ s/WATCHERPID/--watcherpid $PID/sxm;
        my $childID = launchProcess(\%processes, \%children, $proc);
        $log->info("Started process $childID <$processes{$proc}>");
    }
    return;
}

sub initMonitor {
    my %configFile;
    if (loadProperties( $config, \%configFile ) <= 0) {
        $log->info("No processes to watch. Exiting.");
        exit 0;
    }
    undef %processes;
    undef %maxRetries;
    undef %maxFreq;

    # Post process the config file mapping dotted subfields into distinct maps.
    # Default values for retries = 5, frequency=30s
    foreach my $key (keys %configFile) {
        if ($key =~ /\.proc$/sxm) {
            my $proc = $key;
            $proc =~ s/\.proc$//sxm;
            $processes{$proc} = $configFile{$key};
            if (! defined($maxRetries{$proc})) {
                $maxRetries{$proc} = 5;
            }
            if (! defined($maxFreq{$proc})) {
                $maxFreq{$proc} = 30;
            }
        }
        elsif ($key =~ /\.maxfreq$/sxm) {
            my $proc = $key;
            $proc =~ s/\.maxfreq$//sxm;
            $maxFreq{$proc} = $configFile{$key};
        }
        elsif ($key =~ /\.maxretries$/sxm) {
            my $proc = $key;
            $proc =~ s/\.maxretries$//sxm;
            $maxRetries{$proc} = $configFile{$key};
        }
    }
    return;
}

sub launchProcess { my ($procmap, $childmap, $key) = @_ ;
    my $childID = start_process($procmap->{$key});
    $startTime{$key} = time;
    $childmap->{$childID} = $key;
    return $childID;
}

sub restart_child { my ($pid)  = @_ ;
    my $proc = $children{$pid};
    $log->info("$pid has died, restarting $proc [$processes{$proc}]");
    delete $children{$pid};

    # If the time since the last start of this process is less than the max startup frequency,
    # count this as a retry and decrement retry count.
    my $okToStart = 1;
    if (abs(time - $startTime{$proc}) < $maxFreq{$proc}) {
        if ($maxRetries{$proc} > 1) {
            $maxRetries{$proc}--;
        }
        else {
            $log->error("$proc [$processes{$proc}] has died too many times.");
            $okToStart = 0;
        }
    }
    if ($okToStart) {
        my $childID = launchProcess(\%processes, \%children, $proc);
        $log->info("$pid restarted as $childID $proc [$processes{$proc}]");
    }
    return;
}

sub logfilename {
    ( my $name = $PROGRAM_NAME ) =~ s/\.pl//sxm;
    $name = basename($name);
    return catfile($basedir, 'log', $name . '.log');
}

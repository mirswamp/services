#!/usr/bin/env perl

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2019 Software Assurance Marketplace

use 5.010;
use utf8;
use warnings;
use strict;
use Getopt::Long qw/GetOptions/;
use Pod::Usage qw/pod2usage/;
use English '-no_match_vars';
use Carp qw(carp croak);
use Log::Log4perl;
use Log::Log4perl::Level;
use File::Spec qw(catfile);

use FindBin;
use lib ("$FindBin::Bin/..agents/lib", "$FindBin::Bin/lib",
        "$FindBin::Bin/../perl5", "/opt/swamp/perl5");
use VMTools qw(
	inspectmaster
	startVM
	defineVM
	listMasters
	listVMs
	createImages
	createXML
	vmVNCDisplay
	vmExists
	vmState
    checkEffectiveUser
);
use SWAMP::vmu_Support qw(
    getLoggingConfigString
    getSwampDir
    identifyScript
    runScriptDetached
);
use VMConstants;

my $help = 0;
my $man  = 0;
my $list = 0;
my $fullnames = 0;
my $mastername;
our $VERSION = '0.00';

GetOptions(
    'help|?' => \$help,
    'list' => \$list,
    'full' => \$fullnames,
    'inspect=s' => \$mastername,
    'man'    => \$man,
) or pod2usage(2);

if ($help) { pod2usage(1); }
if ($man) { pod2usage( '-verbose' => 2 ); }

my @PRESERVEARGV = @ARGV;
my $debug = 0;
my $asdetached = 0;

sub logfilename {
        return File::Spec->catfile(getSwampDir(), 'log', 'vm_masterinfo.log');
}

Log::Log4perl->init(getLoggingConfigString());
my $log = Log::Log4perl->get_logger(q{});
$log->level($debug ? $TRACE : $INFO);
my $tracelog = Log::Log4perl->get_logger('runtrace');
$tracelog->trace("$PROGRAM_NAME ($PID) called with args: @PRESERVEARGV");
identifyScript(\@PRESERVEARGV);
runScriptDetached() if ($asdetached);

if ( !checkEffectiveUser() ) {
   print {*STDERR}
       "You should run this script as root. Ex: sudo $PROGRAM_NAME\n";
    exit 1;
}

if ($list || $fullnames) {
    my @list = listMasters($fullnames);
    foreach (sort @list) {
        print "$_\n";
    }
    exit 0;
}
if (! defined $mastername) {
    pod2usage('masterimage option is required.');
}
else {
    print inspectmaster($mastername);
}

__END__
=pod

=encoding utf8

=head1 NAME

vm_masterinfo -- Run virt-inspect2 on a master image

=head1 SYNOPSIS

vm_masterinfo [--list] [--full] [--inspect mastername]

=head1 DESCRIPTION

The vm_masterinfo script will display, to standard out, the packages installed
on a VM image as an xml file. See virt-inspect2 for details of what is shown.

=head1 OPTIONS

=over 8

=item --list 

Show the list of master names, this is the same output that start_vm --list will display.

=item --full

Show the full list of all master names, including all revisions of a master
image. The difference between --list and --full is that --list only
shows a single version for each available master, --full shows all versions of all masters.

=item --inspect B<mastername>

Display information about B<mastername>. B<mastername> can be either a short
name taken from the --list option or a full name taken from the --full option.

=item --man

Show manual page for this script

=back

=head1 EXAMPLES

sudo vm_masterinfo --full

sudo vm_masterinfo --inspect condor-fedora-19.0-64-master-2013083001.qcow2

sudo vm_masterinfo --list

sudo vm_masterinfo --inspect fedora-19.0-64

=cut


